/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './datetime-picker.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from './date-picker.component';
import * as import9 from './date-picker.component.ngfactory';
import * as import10 from './time-picker.component';
import * as import11 from './time-picker.component.ngfactory';
import * as import12 from '@angular/core/src/linker/element_ref';
export class Wrapper_DateTimePickerComponent {
  /*private*/ _eventHandler:Function;
  context:import0.DateTimePickerComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  constructor() {
    this._changed = false;
    this._changes = {};
    this.context = new import0.DateTimePickerComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_timestamp(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.timestamp = currValue;
      this._changes['timestamp'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_timezone(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.timezone = currValue;
      this._changes['timezone'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.timestampChange.subscribe(_eventHandler.bind(view,'timestampChange'))); }
  }
}
var renderType_DateTimePickerComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_DateTimePickerComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.DateTimePickerComponent>;
  _DateTimePickerComponent_0_3:Wrapper_DateTimePickerComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DateTimePickerComponent_Host0,renderType_DateTimePickerComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'kairos-datetimepicker',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_DateTimePickerComponent0(this.viewUtils,this,0,this._el_0);
    this._DateTimePickerComponent_0_3 = new Wrapper_DateTimePickerComponent();
    this.compView_0.create(this._DateTimePickerComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._DateTimePickerComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DateTimePickerComponent) && (0 === requestNodeIndex))) { return this._DateTimePickerComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DateTimePickerComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._DateTimePickerComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const DateTimePickerComponentNgFactory:import7.ComponentFactory<import0.DateTimePickerComponent> = new import7.ComponentFactory<import0.DateTimePickerComponent>('kairos-datetimepicker',View_DateTimePickerComponent_Host0,import0.DateTimePickerComponent);
const styles_DateTimePickerComponent:any[] = ['kairos-datepicker[_ngcontent-%COMP%] {\n        padding-right: 5px;\n    }'];
var renderType_DateTimePickerComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.Emulated,styles_DateTimePickerComponent,{});
export class View_DateTimePickerComponent0 extends import2.AppView<import0.DateTimePickerComponent> {
  _text_0:any;
  _el_1:any;
  compView_1:import2.AppView<import8.DatePickerComponent>;
  _DatePickerComponent_1_3:import9.Wrapper_DatePickerComponent;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import10.TimePickerComponent>;
  _TimePickerComponent_3_3:import11.Wrapper_TimePickerComponent;
  _text_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DateTimePickerComponent0,renderType_DateTimePickerComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    	',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'kairos-datepicker',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_1 = new import9.View_DatePickerComponent0(this.viewUtils,this,1,this._el_1);
    this._DatePickerComponent_1_3 = new import9.Wrapper_DatePickerComponent(new import12.ElementRef(this._el_1));
    this.compView_1.create(this._DatePickerComponent_1_3.context);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n		',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,parentRenderNode,'kairos-timepicker',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_3 = new import11.View_TimePickerComponent0(this.viewUtils,this,3,this._el_3);
    this._TimePickerComponent_3_3 = new import11.Wrapper_TimePickerComponent(new import12.ElementRef(this._el_3));
    this.compView_3.create(this._TimePickerComponent_3_3.context);
    this._text_4 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray2(2,'dateModelChange',(null as any)),this.eventHandler(this.handleEvent_1));
    this._DatePickerComponent_1_3.subscribe(this,this.eventHandler(this.handleEvent_1),true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_3,new import3.InlineArray2(2,'timeModelChange',(null as any)),this.eventHandler(this.handleEvent_3));
    this._TimePickerComponent_3_3.subscribe(this,this.eventHandler(this.handleEvent_3),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import8.DatePickerComponent) && (1 === requestNodeIndex))) { return this._DatePickerComponent_1_3.context; }
    if (((token === import10.TimePickerComponent) && (3 === requestNodeIndex))) { return this._TimePickerComponent_3_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.date;
    this._DatePickerComponent_1_3.check_dateModel(currVal_1_0_0,throwOnChange,false);
    this._DatePickerComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_3_0_0:any = this.context.time;
    this._TimePickerComponent_3_3.check_timeModel(currVal_3_0_0,throwOnChange,false);
    this._TimePickerComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    this.compView_1.detectChanges(throwOnChange);
    this.compView_3.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this.compView_3.destroy();
    this._DatePickerComponent_1_3.ngOnDestroy();
    this._TimePickerComponent_3_3.ngOnDestroy();
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'dateModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.date = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'dateModelChange')) {
      const pd_sub_1:any = ((<any>this.context.updateTimestamp()) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'timeModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.time = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'timeModelChange')) {
      const pd_sub_1:any = ((<any>this.context.updateTimestamp()) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}